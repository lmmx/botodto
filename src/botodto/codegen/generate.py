from functools import partial
from pathlib import Path

from datamodel_code_generator import InputFileType, PythonVersion, generate

from ..api.service_name_mapping import MappedServiceName
from ..utils.git.oa_repo import clone_repository
from ..utils.multiproc_utils import batch_multiprocess
from ..utils.path_utils import aws_oa_dir, aws_oa_services_dir, sdk_dir

__all__ = ["generate_interfaces", "_generate_dto_models"]


def generate_interfaces(services: list[str], parallel: bool = True) -> None:
    """
    Generate interfaces for the specified services.

    Each service's DTO models are generated by calling :func:`_generate_dto_models`.

    The generation process can be parallelised by setting :arg:`parallel` to True.
    """
    if not aws_oa_dir.exists():
        clone_repository()
        assert aws_oa_dir.exists(), "OpenAPI repo clone failed"
        assert aws_oa_services_dir.exists(), "OpenAPI Directory repo checkout failed"
    mapped_names = [MappedServiceName(boto3_service) for boto3_service in services]
    generators = [partial(_generate_dto_models, service=name) for name in mapped_names]
    batch_multiprocess(
        functions=generators,
        n_cores=0 if parallel else 1,
        show_progress=True,
        desc="Generating service interfaces",
    )
    return


def _generate_dto_models(service: MappedServiceName) -> None:
    """
    Generate DTO models for the specified service.

    It uses :func:`datamodel_code_generator.generate` to generate Pydantic
    models from OpenAPI schemas.
    """
    assert aws_oa_services_dir.exists(), f"{aws_oa_services_dir=} required for codegen"
    service_dir = aws_oa_services_dir / service.js_v2
    if not service_dir.exists():
        raise FileNotFoundError(f"Repo was checked out but {service_dir=} wasn't found")
    most_recent_schema_date = sorted(service_dir.glob("*"))[-1].name
    input_dir = service_dir / most_recent_schema_date
    input_schema = next(input_dir.glob("*.yaml"))
    output_file = sdk_dir / f"{service.boto3}.py"
    generate(
        input_=input_schema,
        input_file_type=InputFileType.OpenAPI,
        output=output_file,
        target_python_version=PythonVersion.PY_39,
        enum_field_as_literal="one",
        strict_nullable=True,
        collapse_root_models=True,
    )
    _postprocess_generated_models(output_file)
    return


def _postprocess_generated_models(output_file: Path) -> None:
    source = output_file.read_text()
    edited_source = source.replace(r"r'\p{ASCII}*'", r"r'[\x00-\x7F]*'")
    output_file.write_text(edited_source)
    return
