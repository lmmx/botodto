from functools import partial
from pathlib import Path

from datamodel_code_generator import generate

from ...utils.multiproc_utils import batch_multiprocess
from ...utils.path_utils import aws_oa_dir, sdk_dir

__all__ = ["generate_interfaces", "generate_dto_models"]


def generate_interfaces(services: list[str], parallel: bool = True) -> None:
    """
    Generate interfaces for the specified services.

    Each service's DTO models are generated by calling :func:`generate_dto_models`.

    The generation process can be parallelised by setting :arg:`parallel` to True.
    """
    generators = [partial(generate_dto_models, service=name) for name in services]
    batch_multiprocess(
        functions=generators,
        n_cores=0 if parallel else 1,
        show_progress=True,
        desc="",
    )
    return


def generate_dto_models(service: str) -> None:
    """
    Generate DTO models for the specified service.

    It uses :func:`datamodel_code_generator.generate` to generate Pydantic
    models from OpenAPI schemas.
    """
    service_dir = aws_oa_dir / service
    most_recent_schema_date = sorted(service_dir.glob("*"))[-1].name
    input_dir = service_dir / most_recent_schema_date
    input_schema = next(input_dir.glob("*.yaml"))
    output_file = sdk_dir / f"{service}.py"
    generate(
        input_=input_schema,
        output=output_file,
        target_python_version="3.9",
        enum_field_as_literal="one",
        strict_nullable=True,
        collapse_root_models=True,
    )
    return
